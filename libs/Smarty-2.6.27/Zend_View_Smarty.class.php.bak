<?php

require_once 'Zend/View/Interface.php';
require_once 'Smarty-2.6.27/libs/Smarty.class.php';

class Zend_View_Smarty implements Zend_View_Interface
{
  /**
   * Smarty object
   * @var Smarty
   */
  public $_smarty;

  /**
   * �R���X�g���N�^
   *
   * @param string $tmplPath
   * @param array $extraParams
   * @return void
   */
  public function __construct($tmplPath = null, $extraParams = array())
  {

      $this->_smarty = new Smarty;

      if (null !== $tmplPath) {
          $this->setScriptPath($tmplPath);
      }

      foreach ($extraParams as $key => $value) {
          $this->_smarty->$key = $value;
      }

  }

  /**
   * �e���v���[�g�G���W���I�u�W�F�N�g��Ԃ��܂�
   *
   * @return Smarty
   */
  public function getEngine()
  {
      return $this->_smarty;
  }

  /**
   * �e���v���[�g�ւ̃p�X��ݒ肵�܂�
   *
   * @param string $path �p�X�Ƃ��Đݒ肷��f�B���N�g��
   * @return void
   */
  public function setScriptPath($path)
  {
      if (is_readable($path)) {
          $this->_smarty->template_dir = $path;
          return;
      }

      throw new Exception('����ȃp�X���w�肳��܂���');
  }

  /**
   * ���݂̃e���v���[�g�f�B���N�g�����擾���܂�
   *
   * @return string
   */
  public function getScriptPaths()
  {
      return array($this->_smarty->template_dir);
  }



  /**
   * setScriptPath �ւ̃G�C���A�X
   *
   * @param string $path
   * @param string $prefix Unused
   * @return void
   */
  public function setBasePath($path, $prefix = 'Zend_View')
  {
      return $this->setScriptPath($path);
  }

  /**
   * setScriptPath �ւ̃G�C���A�X
   *
   * @param string $path
   * @param string $prefix Unused
   * @return void
   */
  public function addBasePath($path, $prefix = 'Zend_View')
  {
      return $this->setScriptPath($path);
  }

  /**
   * �ϐ����e���v���[�g�ɑ��܂�
   *
   * @param string $key �ϐ���
   * @param mixed $val �ϐ��̒l
   * @return void
   */
  public function __set($key, $val)
  {
      $this->_smarty->assign($key, $val);
  }

  /**
   * empty() �� isset() �̃e�X�g�����삷��悤�ɂ��܂�
   *
   * @param string $key
   * @return boolean
   */
  public function __isset($key)
  {
      return (null !== $this->_smarty->get_template_vars($key));
  }

  /**
   * �I�u�W�F�N�g�̃v���p�e�B�ɑ΂��� unset() �����삷��悤�ɂ��܂�
   *
   * @param string $key
   * @return void
   */
  public function __unset($key)
  {
      $this->_smarty->clear_assign($key);
  }

  /**
   * �ϐ����e���v���[�g�ɑ��܂�
   *
   * �w�肵���L�[���w�肵���l�ɐݒ肵�܂��B���邢�́A
   * �L�[ => �l �`���̔z��ňꊇ�ݒ肵�܂�
   *
   * @see __set()
   * @param string|array $spec �g�p������� (�L�[�A���邢�� �L�[ => �l �̔z��)
   * @param mixed $value (�I�v�V����) ���O���w�肵�đ���ꍇ�́A�����Œl���w�肵�܂�
   * @return void
   */
  public function assign($spec, $value = null)
  {
      if (is_array($spec)) {
          $this->_smarty->assign($spec);
          return;
      }

      $this->_smarty->assign($spec, $value);
  }

  /**
   * ���ς݂̂��ׂĂ̕ϐ����폜���܂�
   *
   * Zend_View �� {@link assign()} ��v���p�e�B
   * ({@link __get()}/{@link __set()}) �ő��ꂽ�ϐ������ׂč폜���܂�
   *
   * @return void
   */
  public function clearVars()
  {
      $this->_smarty->clear_all_assign();
  }

  /**
   * �e���v���[�g���������A���ʂ��o�͂��܂�
   *
   * @param string $name ��������e���v���[�g
   * @return string �o�͌���
   */
  public function render($name)
  {

      return $this->_smarty->fetch($name);
  }

}